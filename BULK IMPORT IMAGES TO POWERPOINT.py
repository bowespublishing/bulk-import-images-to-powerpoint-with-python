import os
import sys
from pptx import Presentation 
from pptx.util import Inches
import PySimpleGUI as gui


def replace_with_image(img, shape, slide):
    pic = slide.shapes.add_picture(img, shape.left, shape.top)

    ratio = min(shape.width / float(pic.width), shape.height / float(pic.height))

    pic.height = int(pic.height * ratio)
    pic.width = int(pic.width * ratio)


    pic.left = int((shape.left) + ((shape.width - pic.width) / 2))
    pic.top = int((shape.top) + ((shape.height - pic.height) / 2))

    placeholder = shape.element
    placeholder.getparent().remove(placeholder)
    return

if __name__ == "__main__":
    
  my_os=sys.platform
  bpicon_base64 = b''
  gui.theme("Black")

  biif_column = [

      [gui.Push(), gui.Text("Bulk Import Images", font=('Arial', 18, 'bold')), gui.Push()],

      [
          gui.Push(),
          gui.Text("Choose the folder where your images are located"),
          gui.Push(),
      ],

      [
          gui.Push(),
          gui.In(size=(25, 1), enable_events=True, key="-IMAGEFOLDER-"),
          gui.FolderBrowse(),
          gui.Push(),
      ],

      [gui.Push(), gui.Text("Presentation Setup", font=('Arial', 18, 'bold')), gui.Push()],

      [gui.Push(),gui.Text('Enter your desired slide width'),gui.Input(size=(5,1),key='-SLIDEWIDTH-')],

      [gui.Push(),gui.Text('Enter your desired slide height'),gui.Input(size=(5,1),key='-SLIDEHEIGHT-')],

      [gui.Push(),gui.Text('Enter your desired minimum top/bottom margin'),gui.Input(size=(5,1),key='-TBMARGIN-')],

      [gui.Push(),gui.Text('Enter your desired minimum left/right margin'),gui.Input(size=(5,1),key='-LRMARGIN-')],

      [gui.Push(), gui.Text("Choose where you want to save your PowerPoint File"), gui.Push()],

      [
          gui.Push(),
          gui.In(size=(25, 1), enable_events=True, key="-EXPORTFILE-"),
          gui.FileSaveAs(file_types=(("PowerPoint files", "*.pptx"),),
                          default_extension = "*.pptx",),
          gui.Push(),
      ],

      [
          gui.Push(),
          gui.Button('Cancel'),
          gui.Button('Ok'),
          gui.Push(),

      ],

  ]

  layout = [
      [
          gui.Column(biif_column),

      ]
  ]

  window = gui.Window("Bulk import images...", layout, background_color='#000000', icon=(bpicon_base64),
                      finalize=True, resizable=True)
  while True:
      event, values = window.read()

      if event == "Exit" or event == 'Cancel' or event == gui.WIN_CLOSED:
          window.close()
          sys.exit()


      elif event == 'Ok':

          global exportfile
          global imagefolder
          global slidewidth
          global slideheight
          global tbmargin
          global lrmargin

          exportfile = values["-EXPORTFILE-"]
          imagefolder = values["-IMAGEFOLDER-"]
          slidewidth = values["-SLIDEWIDTH-"]
          slideheight = values["-SLIDEHEIGHT-"]
          tbmargin = values["-TBMARGIN-"]
          lrmargin = values["-LRMARGIN-"]

          confirm = 'true'

          if exportfile == '':
              gui.Popup('You need to choose where you want to save your PowerPoint file!')
              confirm = 'false'
          if imagefolder == '':
              gui.Popup('You need to choose where the images you want to import are located!')
              confirm = 'false'
          if slidewidth == '':
              gui.Popup('You need to choose a slide width!')
              confirm = 'false'
          else:
              try:
                  float(slidewidth)
              except:
                  gui.Popup('Your slide width needs to be in a numerical format!')
                  confirm = 'false'
          if slideheight == '':
              gui.Popup('You need to choose a slide height!')
              confirm = 'false'
          else:
              try:
                  float(slideheight)
              except:
                  gui.Popup('Your slide height needs to be in a numerical format!')
                  confirm = 'false'
          if tbmargin == '':
              gui.Popup('You need to choose a top/bottom margin!')
              confirm = 'false'
          else:
              try:
                  float(tbmargin)
              except:
                  gui.Popup('Your top/bottom margin needs to be in a numerical format!')
                  confirm = 'false'
          if lrmargin == '':
              gui.Popup('You need to choose a left/right!')
              confirm = 'false'
          else:
              try:
                  float(lrmargin)
              except:
                  gui.Popup('Your left/margin needs to be in a numerical format!')
                  confirm = 'false'
    
                        

          if confirm == 'true':
              break

  if my_os == "win32":
      loc = "\\"
  else:
      loc = "//"
      

  slidewidth = float(slidewidth)
  slideheight = float(slideheight)
  tbmargin = float(tbmargin)
  lrmargin = float(lrmargin)
  hspace = slideheight - (tbmargin * 2)
  wspace = slidewidth - (lrmargin * 2)
  

 
  prs = Presentation()
  prs.slide_width = Inches(slidewidth)
  prs.slide_height = Inches(slideheight)

  s = 0
  totalimages = len(os.listdir(imagefolder))

  layout2 = [[gui.Text('Importing images...')],
            [gui.ProgressBar(max_value=int(totalimages), orientation='h', size=(40, 20), key='progress')]]

  window2 = gui.Window('Importing images...', layout2, finalize=True, background_color='#000000', icon=(bpicon_base64))

  for images in sorted(os.listdir(imagefolder), key=len):
    if (images.endswith(".png") or images.endswith(".jpg") or images.endswith(".jpeg") or images.endswith(".PNG")):
        image_path=imagefolder + loc + images
        blank_slide_layout = prs.slide_layouts[6] 
        slide = prs.slides.add_slide(blank_slide_layout) 
        top = Inches(tbmargin) 
        left = Inches(lrmargin) 
        height = Inches(hspace)
        width = Inches(wspace)
        txBox = slide.shapes.add_textbox(left, top, width, height)
        replace_with_image(image_path, txBox, slide)
        s = s + 1
        progress_bar = window2['progress']
        progress_bar.update_bar(s)
   
  prs.save(exportfile)
  gui.Popup('Import has successfully completed!')
  os._exit(0)



